{"version":3,"sources":["helpers/actorInfoRequest.js","types/types.js","actions/actor.js","components/ActorInfo/ActorInfo.jsx","components/UploadImage/UploadImage.jsx","routers/AppRouter.jsx","store/store.js","reducers/actorReducer.js","App.js","index.js"],"names":["actorInfoRequest","img","a","actorNameRequest","actorName","actorDataRequest","profile_path","name","gender","popularity","known_for","error","data","photo","movies","image","form","FormData","append","axios","post","headers","process","Error","message","success","get","params","api_key","language","page","include_adult","query","results","types","setActor","info","type","payload","ActorInfo","location","useLocation","useSelector","state","actor","actorInfo","queryString","parse","search","q","dispatch","useDispatch","history","useHistory","style","padding","overflow","marginBottom","onClick","e","preventDefault","goBack","ArrowLeftOutlined","gutter","xs","sm","md","lg","className","justify","align","direction","width","size","xl","xxl","src","color","height","itemLayout","dataSource","renderItem","title","overview","vote_average","poster_path","StarFilled","Item","Meta","avatar","maxWidth","borderRadius","alt","description","fontSize","display","justifyContent","alignItems","Dragger","Upload","UploadImage","props","multiple","action","accept","onChange","status","file","fileType","split","pop","toUpperCase","originFileObj","push","InboxOutlined","AppRouter","exact","path","component","to","reducers","combineReducers","store","createStore","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.221467c6.chunk.js","sourcesContent":["\r\nimport axios from 'axios';\r\n\r\nimport { message } from 'antd';\r\n\r\nexport const actorInfoRequest = async (img) => {\r\n  const actorName = typeof(img) === 'string' ? img : await actorNameRequest(img);\r\n\r\n  if (actorName) {\r\n    const { profile_path, name, gender, popularity, known_for } = await actorDataRequest(actorName);\r\n\r\n    return {\r\n      error: \"\",\r\n      data: {\r\n        name,\r\n        popularity,\r\n        photo: profile_path,\r\n        movies: [...known_for],\r\n        gender: gender === 0 ? 'Desconocido' :\r\n          gender === 2 ? 'Hombre' : 'Mujer',\r\n      }\r\n    };\r\n  }\r\n\r\n  return {\r\n    error: \"error\",\r\n    data: \"\"\r\n  }\r\n\r\n}\r\n\r\nconst actorNameRequest = async (image) => {\r\n  const form = new FormData();\r\n  form.append('file', image); // encapsula el archivo\r\n\r\n  //peticion http\r\n  try {\r\n    const { data: { error, actorName } } = await axios.post('https://whois.nomada.cloud/upload', form, {\r\n      headers: {\r\n        'Nomada': process.env.REACT_APP_WhoIs_KEY,\r\n        'Content-Type': 'multipart/form-data'\r\n      }\r\n    });\r\n\r\n    if (error) throw new Error(error);\r\n    message.success(`Imagen cargada correctamente`);\r\n\r\n    return actorName;\r\n  } catch (error) {\r\n    message.error(`No se reconece la imagen`);\r\n  }\r\n}\r\n\r\n\r\nexport const actorDataRequest = async (name) => {\r\n  try {\r\n    const { data } = await axios.get('https://api.themoviedb.org/3/search/person', {\r\n      params: {\r\n        api_key: process.env.REACT_APP_TheMovieDb_KEY,\r\n        language: 'es-ES',\r\n        page: '1',\r\n        include_adult: 'true',\r\n        query: name\r\n      }\r\n    });\r\n\r\n    return data.results[0];\r\n  } catch (error) {\r\n    message.error('Algo fue mal por favor, intente otra vez');\r\n  }\r\n}","export const types = {\r\n  setActor: '[Actor] set',\r\n  deleteActor: '[Actor] delete',\r\n}","import { types } from '../types/types';\r\n\r\nexport const setActor = (info) => ({\r\n  type: types.setActor,\r\n  payload: {\r\n    ...info\r\n  }\r\n});\r\n\r\nexport const deleteActor = () => ({\r\n  type: types.deleteActor\r\n});","import React from 'react';\r\n\r\nimport { useHistory, useLocation } from 'react-router';\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport queryString from \"query-string\";\r\n\r\nimport { actorInfoRequest } from '../../helpers/actorInfoRequest';\r\nimport { setActor } from '../../actions/actor';\r\n\r\nimport { Col, Divider, Row, List, Button, Avatar, Tag, Space } from 'antd';\r\nimport { ArrowLeftOutlined, StarFilled } from '@ant-design/icons';\r\nimport { deleteActor } from '../../actions/actor';\r\n\r\n\r\nexport const ActorInfo = () => {\r\n  const location = useLocation();\r\n\r\n  let data = useSelector(state => state.actor);\r\n\r\n  if (!data.name) {\r\n    const { q } = queryString.parse(location.search);\r\n    data = actorInfo(q);\r\n  }\r\n\r\n  const { photo, name, gender, popularity, movies } = data;\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const handleBack = (e) => {\r\n    e.preventDefault();\r\n\r\n    dispatch(deleteActor());\r\n    history.goBack();\r\n  }\r\n\r\n  async function actorInfo(name) {\r\n    const { data } = await actorInfoRequest(name);\r\n    dispatch(setActor(data));\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {!data.name ?\r\n        <div style={{ fontSize: \"2em\", height: \"100vh\", display: \"flex\", justifyContent: \"center\", alignItems: \"center\" }}>\r\n          Loading...\r\n        </div>\r\n        :\r\n        <div style={{ padding: \"10px\", overflow: \"hidden\" }}>\r\n          <Button type=\"primary\" style={{ marginBottom: \"10px\" }} onClick={handleBack}>\r\n            <ArrowLeftOutlined />Regresar\r\n          </Button>\r\n          <Divider />\r\n          <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n            <Col className=\"gutter-row\" xs={24} md={6} justify=\"center\">\r\n              <Space align=\"center\" direction=\"vertical\" style={{ width: \"100%\" }}>\r\n                {photo &&\r\n                  <Avatar\r\n                    size={{ xs: 40, sm: 60, md: 80, lg: 100, xl: 120, xxl: 150 }}\r\n                    src={`https://image.tmdb.org/t/p/original${photo}`} />\r\n                }\r\n                <h2>{name}</h2>\r\n                <Tag color=\"yellow\">{gender}</Tag>\r\n                <p>Popularidad: {popularity}</p>\r\n              </Space>\r\n            </Col>\r\n            <Divider type=\"vertical\" style={{ height: \"auto\" }} />\r\n            <Col className=\"gutter-row\" xs={24} md={17}>\r\n              <div>\r\n                <h1>Películas:</h1>\r\n                <List\r\n                  itemLayout=\"horizontal\"\r\n                  dataSource={movies}\r\n                  renderItem={({ title, overview, vote_average, poster_path }) => (\r\n                    <>\r\n                      <Row justify=\"space-between\">\r\n                        <Col>\r\n                          <h3>{title}</h3>\r\n                        </Col>\r\n                        <Col>\r\n                          <p>{vote_average}/10 <StarFilled style={{ color: \"gold\" }} /></p>\r\n                        </Col>\r\n                      </Row>\r\n                      <List.Item>\r\n                        <List.Item.Meta\r\n                          avatar={<img style={{ maxWidth: \"120px\", padding: \"4px\", borderRadius: \"10px\" }} src={`https://image.tmdb.org/t/p/original${poster_path}`} alt=\"Movie\" />}\r\n                          description={overview}\r\n                        />\r\n                      </List.Item>\r\n                    </>\r\n                  )}\r\n                />\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      }\r\n    </>\r\n  )\r\n}","import React from 'react';\r\n\r\nimport { useHistory } from 'react-router';\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { setActor } from '../../actions/actor';\r\n\r\nimport { actorInfoRequest } from '../../helpers/actorInfoRequest';\r\n\r\nimport { Upload, message, Space } from 'antd';\r\nimport { InboxOutlined } from '@ant-design/icons';\r\n\r\nconst { Dragger } = Upload;\r\n\r\nexport const UploadImage = () => {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const props = {\r\n    name: 'image',\r\n    multiple: false,\r\n    action: 'https://whois.nomada.cloud/upload',\r\n    accept: '.jpg,.png',\r\n\r\n    //manipular onChange\r\n    async onChange(info) {\r\n      const { status } = info.file;\r\n      \r\n      const fileType = (info.file.name).split('.').pop().toUpperCase();\r\n\r\n      if (fileType === 'PNG' || fileType === 'JPG') {\r\n        if (status === 'done') {\r\n          const { error, data } = await actorInfoRequest(info.file.originFileObj);\r\n          if (!error) {\r\n            dispatch(setActor(data));\r\n            history.push(`/actor-info?q=${data.name}`);\r\n          }\r\n        } else if (status === 'error') {\r\n          message.error(`${info.file.name} la carga del archivo falló.`);\r\n        }\r\n      } else if (status === 'done') {\r\n        message.error('Solo se permiten imágenes jpg o png.');\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Space align=\"center\" direction=\"vertical\" style={{ width: \"100%\" }}>\r\n      <h2>¿Quién es ese actor?</h2>\r\n      <Dragger {...props} style={{ padding: \"10px\" }}>\r\n        <p className=\"ant-upload-drag-icon\">\r\n          <InboxOutlined />\r\n        </p>\r\n        <p className=\"ant-upload-text\">Haz click o arrastra una imagen</p>\r\n        <p className=\"ant-upload-hint\">\r\n          Selcciona la foto de un actor famoso para conocer quién es y en qué películas ha salido\r\n        </p>\r\n      </Dragger>\r\n    </Space>\r\n  );\r\n}\r\n","import { HashRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\r\n\r\nimport { ActorInfo } from \"../components/ActorInfo/ActorInfo\";\r\nimport { UploadImage } from \"../components/UploadImage/UploadImage\";\r\n\r\nexport const AppRouter = () => {\r\n\r\n  return (\r\n    <Router>\r\n      <div>\r\n        <div>\r\n          <Switch>\r\n            <Route\r\n              exact\r\n              path='/upload-image'\r\n              component={UploadImage}\r\n            />\r\n\r\n            <Route\r\n              path='/actor-info'\r\n              component={ActorInfo}\r\n            />\r\n\r\n            <Redirect to='/upload-image' />\r\n          </Switch>\r\n        </div>\r\n      </div>\r\n    </Router>\r\n  );\r\n};\r\n","import { createStore, combineReducers } from 'redux';\r\nimport { actorReducer } from '../reducers/actorReducer';\r\n\r\nconst reducers = combineReducers({\r\n  actor: actorReducer,\r\n});\r\n\r\n\r\nexport const store = createStore(\r\n  reducers,\r\n);","import { types } from '../types/types';\r\n\r\nexport const actorReducer = (state = {}, action) => {\r\n\r\n    switch (action.type) {\r\n        case types.setActor:\r\n            return {\r\n                ...action.payload\r\n            };\r\n\r\n        case types.deleteActor:\r\n            return {};\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\n\nimport { AppRouter } from \"./routers/AppRouter\";\n\nimport { Provider } from 'react-redux';\nimport { store } from './store/store';\n\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <AppRouter />\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}